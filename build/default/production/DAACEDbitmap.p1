Version 3.2 HI-TECH Software Intermediate Code
"7 DAACEDbitmap.h
[s S3 `*Cuc 1 `uc 1 `uc 1 ]
[n S3 . image_data image_width image_height ]
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;DAACEDfont.h: 13: typedef uint8_t uint_8;
[; ;DAACEDfont.h: 15: typedef struct FONT_CHAR_INFO {
[; ;DAACEDfont.h: 16: uint_8 width;
[; ;DAACEDfont.h: 17: uint16_t offset;
[; ;DAACEDfont.h: 18: }FONT_CHAR_INFO;
[; ;DAACEDfont.h: 20: typedef struct FONT_INFO
[; ;DAACEDfont.h: 21: {
[; ;DAACEDfont.h: 22: uint_8 height;
[; ;DAACEDfont.h: 23: uint8_t character_spacing;
[; ;DAACEDfont.h: 24: char char_start;
[; ;DAACEDfont.h: 25: char char_end;
[; ;DAACEDfont.h: 26: const FONT_CHAR_INFO* char_descriptors;
[; ;DAACEDfont.h: 27: const uint_8 *bitmap;
[; ;DAACEDfont.h: 28: } FONT_INFO;
[; ;DAACEDfont.h: 31: extern const uint_8 tahoma_8ptBitmaps[];
[; ;DAACEDfont.h: 32: extern const FONT_INFO tahoma_8ptFontInfo;
[; ;DAACEDfont.h: 33: extern const FONT_CHAR_INFO tahoma_8ptDescriptors[];
[; ;DAACEDfont.h: 36: extern const uint_8 timesNewRoman_9ptBitmaps[];
[; ;DAACEDfont.h: 37: extern const FONT_INFO timesNewRoman_9ptFontInfo;
[; ;DAACEDfont.h: 38: extern const FONT_CHAR_INFO timesNewRoman_9ptDescriptors[];
[; ;DAACEDfont.h: 41: extern const uint_8 timesNewRoman_11ptBitmaps[];
[; ;DAACEDfont.h: 42: extern const FONT_INFO timesNewRoman_11ptFontInfo;
[; ;DAACEDfont.h: 43: extern const FONT_CHAR_INFO timesNewRoman_11ptDescriptors[];
[; ;DAACEDfont.h: 46: extern const uint_8 microsoftSansSerif_36ptBitmaps[];
[; ;DAACEDfont.h: 47: extern const FONT_INFO microsoftSansSerif_36ptFontInfo;
[; ;DAACEDfont.h: 48: extern const FONT_CHAR_INFO microsoftSansSerif_36ptDescriptors[];
[; ;DAACEDfont.h: 51: extern const uint_8 microsoftSansSerif_42ptBitmaps[];
[; ;DAACEDfont.h: 52: extern const FONT_INFO microsoftSansSerif_42ptFontInfo;
[; ;DAACEDfont.h: 53: extern const FONT_CHAR_INFO microsoftSansSerif_42ptDescriptors[];
[; ;DAACEDfont.h: 56: extern const uint_8 microsoftSansSerif_48ptBitmaps[];
[; ;DAACEDfont.h: 57: extern const FONT_INFO microsoftSansSerif_48ptFontInfo;
[; ;DAACEDfont.h: 58: extern const FONT_CHAR_INFO microsoftSansSerif_48ptDescriptors[];
[; ;DAACEDbitmap.h: 7: typedef struct {
[; ;DAACEDbitmap.h: 8: const unsigned char* image_data;
[; ;DAACEDbitmap.h: 9: unsigned char image_width;
[; ;DAACEDbitmap.h: 10: unsigned char image_height;
[; ;DAACEDbitmap.h: 11: } bitmap_data_t;
[; ;DAACEDbitmap.h: 12: extern const bitmap_data_t battery_bitmap_data;
[; ;DAACEDbitmap.h: 14: extern const bitmap_data_t demo_bitmap_data;
"9 DAACEDbitmap.c
[v _battery_emptyBitmaps `Cuc ~T0 @X0 -> 0 `x e ]
[i _battery_emptyBitmaps
:U ..
"11
-> -> 255 `i `uc
-> -> 254 `i `uc
"12
-> -> 128 `i `uc
-> -> 2 `i `uc
"13
-> -> 128 `i `uc
-> -> 3 `i `uc
"14
-> -> 128 `i `uc
-> -> 3 `i `uc
"15
-> -> 128 `i `uc
-> -> 3 `i `uc
"16
-> -> 128 `i `uc
-> -> 3 `i `uc
"17
-> -> 128 `i `uc
-> -> 2 `i `uc
"18
-> -> 255 `i `uc
-> -> 254 `i `uc
..
]
[; ;DAACEDbitmap.c: 9: const uint8_t battery_emptyBitmaps[] =
[; ;DAACEDbitmap.c: 10: {
[; ;DAACEDbitmap.c: 11: 0xFF, 0xFE,
[; ;DAACEDbitmap.c: 12: 0x80, 0x02,
[; ;DAACEDbitmap.c: 13: 0x80, 0x03,
[; ;DAACEDbitmap.c: 14: 0x80, 0x03,
[; ;DAACEDbitmap.c: 15: 0x80, 0x03,
[; ;DAACEDbitmap.c: 16: 0x80, 0x03,
[; ;DAACEDbitmap.c: 17: 0x80, 0x02,
[; ;DAACEDbitmap.c: 18: 0xFF, 0xFE,
[; ;DAACEDbitmap.c: 19: };
"20
[v _battery_bitmap_data `CS3 ~T0 @X0 1 e ]
[i _battery_bitmap_data
:U ..
:U ..
&U _battery_emptyBitmaps
-> * -> 2 `i -> 8 `i `uc
-> -> 8 `i `uc
..
..
]
[; ;DAACEDbitmap.c: 20: const bitmap_data_t battery_bitmap_data = {battery_emptyBitmaps, 2*8, 8};
"27
[v _demo_bitmaps `Cuc ~T0 @X0 -> 0 `x e ]
[i _demo_bitmaps
:U ..
"28
-> -> 3 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 224 `i `uc
"29
-> -> 15 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 224 `i `uc
"30
-> -> 31 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 224 `i `uc
"31
-> -> 63 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 224 `i `uc
"32
-> -> 127 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 224 `i `uc
"33
-> -> 127 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 224 `i `uc
"34
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 224 `i `uc
"35
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 224 `i `uc
"36
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 224 `i `uc
"37
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 224 `i `uc
"38
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 224 `i `uc
"39
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 224 `i `uc
"40
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 224 `i `uc
"41
-> -> 255 `i `uc
-> -> 254 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 31 `i `uc
-> -> 224 `i `uc
"42
-> -> 255 `i `uc
-> -> 254 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 7 `i `uc
-> -> 224 `i `uc
"43
-> -> 255 `i `uc
-> -> 254 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 1 `i `uc
-> -> 224 `i `uc
"44
-> -> 255 `i `uc
-> -> 254 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 224 `i `uc
"45
-> -> 255 `i `uc
-> -> 254 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 96 `i `uc
"46
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 0 `i `uc
-> -> 96 `i `uc
"47
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 192 `i `uc
-> -> 32 `i `uc
"48
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 224 `i `uc
-> -> 0 `i `uc
"49
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 240 `i `uc
-> -> 0 `i `uc
"50
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 240 `i `uc
-> -> 0 `i `uc
"51
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 248 `i `uc
-> -> 0 `i `uc
"52
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 248 `i `uc
-> -> 0 `i `uc
"53
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 248 `i `uc
-> -> 0 `i `uc
"54
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 248 `i `uc
-> -> 0 `i `uc
"55
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 248 `i `uc
-> -> 0 `i `uc
"56
-> -> 127 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 240 `i `uc
-> -> 0 `i `uc
"57
-> -> 127 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 240 `i `uc
-> -> 0 `i `uc
"58
-> -> 63 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 224 `i `uc
-> -> 0 `i `uc
"59
-> -> 15 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 192 `i `uc
-> -> 0 `i `uc
"60
-> -> 3 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
..
]
[; ;DAACEDbitmap.c: 27: const uint8_t demo_bitmaps[] = {
[; ;DAACEDbitmap.c: 28: 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
[; ;DAACEDbitmap.c: 29: 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
[; ;DAACEDbitmap.c: 30: 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
[; ;DAACEDbitmap.c: 31: 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
[; ;DAACEDbitmap.c: 32: 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
[; ;DAACEDbitmap.c: 33: 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
[; ;DAACEDbitmap.c: 34: 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
[; ;DAACEDbitmap.c: 35: 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
[; ;DAACEDbitmap.c: 36: 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
[; ;DAACEDbitmap.c: 37: 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
[; ;DAACEDbitmap.c: 38: 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
[; ;DAACEDbitmap.c: 39: 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
[; ;DAACEDbitmap.c: 40: 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
[; ;DAACEDbitmap.c: 41: 0xFF, 0xFE, 0x00, 0x00, 0x1F, 0xE0,
[; ;DAACEDbitmap.c: 42: 0xFF, 0xFE, 0x00, 0x00, 0x07, 0xE0,
[; ;DAACEDbitmap.c: 43: 0xFF, 0xFE, 0x00, 0x00, 0x01, 0xE0,
[; ;DAACEDbitmap.c: 44: 0xFF, 0xFE, 0x00, 0x00, 0x00, 0xE0,
[; ;DAACEDbitmap.c: 45: 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x60,
[; ;DAACEDbitmap.c: 46: 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x60,
[; ;DAACEDbitmap.c: 47: 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x20,
[; ;DAACEDbitmap.c: 48: 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00,
[; ;DAACEDbitmap.c: 49: 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00,
[; ;DAACEDbitmap.c: 50: 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00,
[; ;DAACEDbitmap.c: 51: 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00,
[; ;DAACEDbitmap.c: 52: 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00,
[; ;DAACEDbitmap.c: 53: 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00,
[; ;DAACEDbitmap.c: 54: 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00,
[; ;DAACEDbitmap.c: 55: 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00,
[; ;DAACEDbitmap.c: 56: 0x7F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00,
[; ;DAACEDbitmap.c: 57: 0x7F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00,
[; ;DAACEDbitmap.c: 58: 0x3F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00,
[; ;DAACEDbitmap.c: 59: 0x0F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00,
[; ;DAACEDbitmap.c: 60: 0x03, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
[; ;DAACEDbitmap.c: 61: };
"64
[v _demo_bitmap_data `CS3 ~T0 @X0 1 e ]
[i _demo_bitmap_data
:U ..
:U ..
&U _demo_bitmaps
-> * -> 6 `i -> 8 `i `uc
-> -> 33 `i `uc
..
..
]
[; ;DAACEDbitmap.c: 64: const bitmap_data_t demo_bitmap_data = {demo_bitmaps, 6*8, 33};
