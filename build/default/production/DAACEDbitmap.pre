
# 1 "DAACEDbitmap.c"

# 13 "D:\Microchip\xc8\v1.41\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 13 "DAACEDfont.h"
typedef uint8_t uint_8;

typedef struct FONT_CHAR_INFO {
uint_8 width;
uint16_t offset;
}FONT_CHAR_INFO;

typedef struct FONT_INFO
{
uint_8 height;
uint8_t character_spacing;
char char_start;
char char_end;
const FONT_CHAR_INFO* char_descriptors;
const uint_8 *bitmap;
} FONT_INFO;


extern const uint_8 tahoma_8ptBitmaps[];
extern const FONT_INFO tahoma_8ptFontInfo;
extern const FONT_CHAR_INFO tahoma_8ptDescriptors[];


extern const uint_8 timesNewRoman_9ptBitmaps[];
extern const FONT_INFO timesNewRoman_9ptFontInfo;
extern const FONT_CHAR_INFO timesNewRoman_9ptDescriptors[];


extern const uint_8 timesNewRoman_11ptBitmaps[];
extern const FONT_INFO timesNewRoman_11ptFontInfo;
extern const FONT_CHAR_INFO timesNewRoman_11ptDescriptors[];


extern const uint_8 microsoftSansSerif_36ptBitmaps[];
extern const FONT_INFO microsoftSansSerif_36ptFontInfo;
extern const FONT_CHAR_INFO microsoftSansSerif_36ptDescriptors[];


extern const uint_8 microsoftSansSerif_42ptBitmaps[];
extern const FONT_INFO microsoftSansSerif_42ptFontInfo;
extern const FONT_CHAR_INFO microsoftSansSerif_42ptDescriptors[];


extern const uint_8 microsoftSansSerif_48ptBitmaps[];
extern const FONT_INFO microsoftSansSerif_48ptFontInfo;
extern const FONT_CHAR_INFO microsoftSansSerif_48ptDescriptors[];

# 7 "DAACEDbitmap.h"
typedef struct {
const unsigned char* image_data;
unsigned char image_width;
unsigned char image_height;
} bitmap_data_t;
extern const bitmap_data_t battery_bitmap_data;

extern const bitmap_data_t demo_bitmap_data;

# 9 "DAACEDbitmap.c"
const uint8_t battery_emptyBitmaps[] =
{
0xFF, 0xFE,
0x80, 0x02,
0x80, 0x03,
0x80, 0x03,
0x80, 0x03,
0x80, 0x03,
0x80, 0x02,
0xFF, 0xFE,
};
const bitmap_data_t battery_bitmap_data = {battery_emptyBitmaps, 2*8, 8};

# 27
const uint8_t demo_bitmaps[] = {
0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
0xFF, 0xFE, 0x00, 0x00, 0x1F, 0xE0,
0xFF, 0xFE, 0x00, 0x00, 0x07, 0xE0,
0xFF, 0xFE, 0x00, 0x00, 0x01, 0xE0,
0xFF, 0xFE, 0x00, 0x00, 0x00, 0xE0,
0xFF, 0xFE, 0x00, 0x00, 0x00, 0x60,
0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x60,
0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x20,
0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00,
0x7F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00,
0x7F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00,
0x3F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00,
0x0F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00,
0x03, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
};


const bitmap_data_t demo_bitmap_data = {demo_bitmaps, 6*8, 33};

